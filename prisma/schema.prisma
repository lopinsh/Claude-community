// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profiles
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String? // For credentials login
  name      String?
  image     String?
  location  String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role-based access control
  role UserRole @default(USER)

  // Company-specific fields (for COMPANY role)
  companyName            String?
  companyBio             String?
  subscriptionStatus     SubscriptionStatus?
  subscriptionStartDate  DateTime?
  subscriptionEndDate    DateTime?

  // NextAuth.js required fields
  accounts Account[]
  sessions Session[]

  // Our app relationships
  groups         Group[] // Groups created by this user
  applications   Application[] // Applications to join groups
  eventAttendees EventAttendee[] // Attendance at specific events
  groupMessages  GroupMessage[]
  notifications  Notification[]
  tagSuggestions TagSuggestion[] // Tag suggestions made by this user
  newsArticles   NewsArticle[] // News articles authored by this user
  pages          Page[] // Pages authored by this user

  // Track pending suggestions for rate limiting
  pendingSuggestionCount Int @default(0)

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enhanced Tag system with proper hierarchy
model Tag {
  id         String    @id @default(cuid())
  name       String    @unique
  parentId   String?   // DEPRECATED - kept for backward compatibility
  level      Int       @default(1) // 1=broad categories, 2=specific types, 3=attributes
  group      TagGroup  @default(VERTICAL) // VERTICAL (hierarchical) or HORIZONTAL (attributes)
  usageCount Int       @default(0) // Track popularity for recommendations
  status     TagStatus @default(ACTIVE)

  // Dynamic metadata (for L1 categories)
  colorKey   String?   // Mantine color key (e.g., "categoryTeal") - L1 only
  iconName   String?   // Icon name (e.g., "IconBrain") - L1 only
  description String?  // Brief description (e.g., "Learn & Make") - optional

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Self-referential relationship for hierarchy (DEPRECATED - use TagParent)
  parent   Tag?  @relation("TagHierarchy", fields: [parentId], references: [id])
  children Tag[] @relation("TagHierarchy")

  // Multi-parent relationships (NEW - replaces single parent)
  childTagParents  TagParent[] @relation("ChildTags")  // When this tag is the child (L3)
  parentTagParents TagParent[] @relation("ParentTags") // When this tag is the parent (L2/L1)

  // Relationships with groups and events
  groups GroupTag[]
  events EventTag[] // Events can have specific tags

  @@map("tags")
}

// Many-to-many tag parent relationships (supports cross-category topics)
model TagParent {
  id        String   @id @default(cuid())
  tagId     String   // FK to Tag (child - typically L3)
  parentId  String   // FK to Tag (parent - typically L2)
  isPrimary Boolean  @default(false) // Only one primary parent per child tag

  // Denormalized for query performance
  l1Category String // "Gathering & Fun"
  l1ColorKey String // "categoryPeach"

  tag    Tag @relation("ChildTags", fields: [tagId], references: [id], onDelete: Cascade)
  parent Tag @relation("ParentTags", fields: [parentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([tagId, parentId])
  @@index([tagId])
  @@index([parentId])
  @@index([isPrimary])
  @@map("tag_parents")
}

// Tag suggestions from users (community-driven taxonomy growth)
model TagSuggestion {
  id     String               @id @default(cuid())
  nameEn String // Suggested tag name in English
  nameLv String // Suggested tag name in Latvian
  level  Int                  @default(3) // Always 3 (users can only suggest Level 3)
  status TagSuggestionStatus @default(PENDING)

  // Multiple parents allowed (Level 2 tags)
  parentTagIds String[] // Array of Tag IDs this should connect to

  // User who suggested
  suggestedById String
  suggestedBy   User   @relation(fields: [suggestedById], references: [id], onDelete: Cascade)

  // Moderation fields
  moderatedById   String? // User ID of moderator who reviewed
  moderatedAt     DateTime? // When was it reviewed
  moderatorNotes  String? // Reason for denial or notes
  mergedIntoTagId String? // If merged, which existing tag was it merged into

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([suggestedById, status])
  @@map("tag_suggestions")
}

enum TagSuggestionStatus {
  PENDING
  APPROVED
  DENIED
  MERGED
}

// New join table for Event tags
model EventTag {
  id        String   @id @default(cuid())
  eventId   String
  tagId     String
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([eventId, tagId])
  @@map("event_tags")
}


model GroupTag {
  id        String   @id @default(cuid())
  groupId   String
  tagId     String
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([groupId, tagId])
  @@index([tagId])
  @@index([groupId])
  @@map("group_tags")
}

// Groups - Main organizational units (formerly Activities)
model Group {
  id          String   @id @default(cuid())
  title       String
  description String?
  location    String
  maxMembers  Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Group type determines behavior
  groupType GroupType @default(SINGLE_EVENT) // SINGLE_EVENT or RECURRING_GROUP

  // Moderation fields
  moderationStatus ModerationStatus @default(APPROVED) // PENDING, APPROVED, REJECTED
  moderatedAt      DateTime? // When was it reviewed
  moderatedBy      String? // User ID of moderator
  moderationNotes  String? // Internal notes from moderator

  // Relationships
  creatorId     String
  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  events        Event[] // Multiple events can belong to a group
  applications  Application[] // Users apply to join the group
  groupMessages GroupMessage[]
  notifications Notification[]
  tags          GroupTag[] // Renamed from ActivityTag

  // Performance indexes
  @@index([isActive, createdAt])
  @@index([location])
  @@index([creatorId])
  @@map("groups")
}

// Events - Specific scheduled occurrences within a group
model Event {
  id          String  @id @default(cuid())
  title       String? // Optional - can inherit from group
  description String? // Optional event-specific description

  // Scheduling
  startDateTime DateTime
  endDateTime   DateTime?
  isAllDay      Boolean   @default(false)
  timeZone      String    @default("Europe/Riga")

  // Event type and pattern
  eventType     EventType @default(REGULAR) // REGULAR, SPECIAL, CANCELLED
  weekDay       Int? // 0=Sunday, 1=Monday, etc. (for weekly patterns)

  // Privacy and access control
  visibility    EventVisibility @default(PRIVATE) // PRIVATE, PUBLIC
  requiresApproval Boolean @default(false) // For public events, require approval to attend

  // Override group settings if needed
  maxMembers Int? // Can limit participants per event
  location   String? // Can override group location

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  groupId   String
  group     Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  attendees EventAttendee[] // Who's attending this specific event
  tags      EventTag[]      // Event-specific tags

  // Performance indexes
  @@index([startDateTime])
  @@index([visibility, startDateTime])
  @@index([groupId, startDateTime])
  @@map("events")
}

// Event attendance - tracks who attends specific events
model EventAttendee {
  id        String           @id @default(cuid())
  status    AttendanceStatus @default(GOING) // GOING, NOT_GOING, MAYBE
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relationships
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([status])
  @@index([eventId, status])
  @@map("event_attendees")
}

// Enums for the new model
enum GroupType {
  SINGLE_EVENT // One-time activity (backward compatibility)
  RECURRING_GROUP // Group with multiple scheduled events
}

enum EventType {
  REGULAR // Regular scheduled event (e.g., weekly rehearsal)
  SPECIAL // Special event (e.g., performance, tournament)
  CANCELLED // Cancelled event (keeps history)
}

enum EventVisibility {
  PRIVATE // Only group members can see and attend
  PUBLIC  // Anyone can see, may require approval to attend
}

enum AttendanceStatus {
  GOING
  NOT_GOING
  MAYBE
}

enum ModerationStatus {
  PENDING   // Awaiting moderator review
  APPROVED  // Approved by moderator
  REJECTED  // Rejected by moderator
}


model Application {
  id        String   @id @default(cuid())
  status    String   @default("pending") // "pending", "accepted", "declined", "removed"
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships - only support groups now
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Group relationship (required)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  notifications Notification[]

  @@unique([userId, groupId])
  @@index([status])
  @@index([groupId, status])
  @@map("applications")
}

model GroupMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Relationships - only support groups now
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Group relationship (required)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  notifications Notification[]

  @@map("group_messages")
}

// Notification model
model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  title   String
  message String?
  isRead  Boolean          @default(false)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional relations to link notifications to specific entities
  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  applicationId String?
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  messageId    String?
  groupMessage GroupMessage? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@map("notifications")
}

enum NotificationType {
  NEW_APPLICATION // Someone applied to your group
  APPLICATION_ACCEPTED // Your application was accepted
  APPLICATION_DECLINED // Your application was declined
  NEW_MESSAGE // New message in group you joined
  GROUP_UPDATE // Group you joined was updated
  EVENT_CREATED // New event created in your group
  EVENT_UPDATED // Event in your group was updated
  TAG_SUGGESTION_APPROVED // Your tag suggestion was approved
  TAG_SUGGESTION_DENIED // Your tag suggestion was denied
  TAG_SUGGESTION_MERGED // Your tag suggestion was merged with existing tag
}

// News article model for community updates
model NewsArticle {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       String    @db.Text
  excerpt       String?   @db.Text
  featuredImage String?
  published     Boolean   @default(false)
  publishedAt   DateTime?

  // Author relationship
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([published, publishedAt])
  @@index([slug])
  @@map("news_articles")
}

// Custom pages created by moderators
model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  published Boolean  @default(false)

  // Author relationship
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([published])
  @@index([slug])
  @@map("pages")
}

enum TagStatus {
  ACTIVE
  MERGED
  DEPRECATED
}

enum TagGroup {
  VERTICAL    // Hierarchical tags (Physical Activities -> Dance -> Folk Dance)
  HORIZONTAL  // Attribute tags (Beginner-Friendly, Weekly, Evening)
}

enum UserRole {
  USER       // Regular user (default)
  MODERATOR  // Can manage tags, approve content, publish news/pages
  COMPANY    // Business partner with subscription features
  ADMIN      // Full system access (developers)
}

enum SubscriptionStatus {
  TRIAL      // Trial period
  ACTIVE     // Active subscription
  SUSPENDED  // Temporarily suspended (payment issue)
  CANCELLED  // Cancelled subscription
}
